/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entities.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Juha
 */
public class Menu extends javax.swing.JFrame {

    private DefaultTableModel mod;
    private DefaultTableModel dtm;
    private DefaultTableModel model;
    private TableRowSorter<DefaultTableModel> sorter;
    private DefaultTableCellRenderer centerRenderer;
    private int authorCounter = 0;
    private int categoryCounter = 0;
    private int id = 0;

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelBrowse = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Object col[] = {"ID", "Kirjailija", "Nimi", "Julkaisuvuosi", "Kategoria", "Lainassa", "Lainaaja", "Alkuperäinen nimi"};
        mod = new DefaultTableModel(null, col) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        browseTable = new javax.swing.JTable();
        filterAuthor = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        panelAdd = new javax.swing.JPanel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        lblAddAuthor = new javax.swing.JLabel();
        btnAddAuthor = new javax.swing.JButton();
        lblAddCategoryHeader = new javax.swing.JLabel();
        lblAddCategory = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        btnAddCategory = new javax.swing.JButton();
        lblAddBook = new javax.swing.JLabel();
        ArrayList<Author> authors = Author.getAuthors();
        cBoxAuthor = new javax.swing.JComboBox();
        ArrayList<Category> categories = Category.getCategories();
        cBoxCategory = new javax.swing.JComboBox();
        lblBookName = new javax.swing.JLabel();
        lblOrigName = new javax.swing.JLabel();
        lblPubYear = new javax.swing.JLabel();
        txtBookName = new javax.swing.JTextField();
        txtPubYear = new javax.swing.JTextField();
        txtOriginalName = new javax.swing.JTextField();
        txtLoaner = new javax.swing.JTextField();
        btnAddBook = new javax.swing.JButton();
        checkLoan = new javax.swing.JCheckBox();
        star1 = new javax.swing.JLabel();
        star2 = new javax.swing.JLabel();
        star4 = new javax.swing.JLabel();
        lblStar = new javax.swing.JLabel();
        star3 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Object cols[] = {"Kirjailija", "Kategoria"};
        dtm = new DefaultTableModel(null, cols) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        addManyTable = new javax.swing.JTable();
        btnAuthorToTable = new javax.swing.JButton();
        btnCatToTable = new javax.swing.JButton();
        panelEdit = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Object columns[] = {"Nimi", "Julkaisuvuosi", "Lainassa", "Lainaaja", "Alkuperäinen nimi"};
        model = new DefaultTableModel(null, columns){
            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }
        };
        editBookTable = new javax.swing.JTable()/*{
            private static final long serialVersionUID = 719605636099468931L;

            @SuppressWarnings({"rawtypes", "unchecked"})
            @Override
            public Class getColumnClass(int column){
                switch (column) {
                    case 2:
                    return Boolean.class;
                    default:
                    return String.class;
                }
            }
        }*/
        ;
        jLabel1 = new javax.swing.JLabel();
        btnSaveChanges = new javax.swing.JButton();
        panelDelete = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        sorter = new TableRowSorter<DefaultTableModel>(mod);
        browseTable.setRowSorter(sorter);
        browseTable.setModel(mod);
        fillTable();
        browseTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if(browseTable.getSelectedRow() != -1) {
                    id = (Integer) browseTable.getValueAt(browseTable.getSelectedRow(), 0);
                    fillEditBookTable();
                }
            }
        });
        jScrollPane1.setViewportView(browseTable);

        filterAuthor.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }
            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }
            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });
        filterAuthor.setToolTipText("Kirjoita osa kirjailijan tai kirjan nimestä, tai vuodesta");

        lblSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSearch.setText("Haku");

        javax.swing.GroupLayout panelBrowseLayout = new javax.swing.GroupLayout(panelBrowse);
        panelBrowse.setLayout(panelBrowseLayout);
        panelBrowseLayout.setHorizontalGroup(
            panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBrowseLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
                    .addGroup(panelBrowseLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSearch)
                        .addGap(18, 18, 18)
                        .addComponent(filterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        panelBrowseLayout.setVerticalGroup(
            panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBrowseLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Selaa", panelBrowse);

        lblFirstName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFirstName.setText("Etunimi");

        lblLastName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLastName.setText("Sukunimi");

        lblAddAuthor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddAuthor.setText("Kirjailijan lisääminen");

        btnAddAuthor.setText("Lisää kirjailija");
        btnAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAuthorActionPerformed(evt);
            }
        });

        lblAddCategoryHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddCategoryHeader.setText("Kategorian lisääminen");

        lblAddCategory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAddCategory.setText("Kategoria");

        btnAddCategory.setText("Lisää kategoria");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        lblAddBook.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddBook.setText("Kirjan lisääminen");

        cBoxAuthor.setModel(new javax.swing.DefaultComboBoxModel());

        cBoxCategory.setModel(new javax.swing.DefaultComboBoxModel());

        lblBookName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBookName.setText("Kirjan nimi");

        lblOrigName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblOrigName.setText("Alkuperäinen nimi");

        lblPubYear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPubYear.setText("Julkaisuvuosi");
        lblPubYear.setToolTipText("Nelinumeroinen vuosiluku, esim. 1994");

        btnAddBook.setText("Lisää kirja");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        checkLoan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkLoan.setText("Lainassa / Lainaaja");
        checkLoan.setToolTipText("Laita rasti ruutuun jos kirja on lainassa");

        star1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star1.setForeground(new java.awt.Color(255, 0, 0));
        star1.setText("*");
        star1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star2.setForeground(new java.awt.Color(255, 0, 0));
        star2.setText("*");
        star2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star4.setForeground(new java.awt.Color(255, 0, 0));
        star4.setText("*");
        star4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lblStar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStar.setText("Tähdellä merkityt ovat pakollisia tietoja");

        star3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star3.setForeground(new java.awt.Color(255, 0, 0));
        star3.setText("*");
        star3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnClear.setText("Tyhjennä");
        btnClear.setToolTipText("Paina tyhjentääksesi 'Lisää kirja'-lomakkeen tekstikentät");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        addManyTable.setModel(dtm);
        fillAddManyTable();
        jScrollPane2.setViewportView(addManyTable);

        btnAuthorToTable.setText("Lisää kirjailija");
        btnAuthorToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorToTableActionPerformed(evt);
            }
        });

        btnCatToTable.setText("Lisää kategoria");
        btnCatToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatToTableActionPerformed(evt);
            }
        });

        for(Author a : authors){
            cBoxAuthor.addItem(a.getLastName() + ", " + a.getName());
        }
        for(Category c : categories){
            cBoxCategory.addItem(c.getName());
        }

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFirstName)
                                    .addComponent(lblLastName))
                                .addGap(35, 35, 35)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFirstName)
                                    .addComponent(txtLastName)))
                            .addComponent(lblAddAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(btnAddAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cBoxAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAddCategoryHeader)
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(panelAddLayout.createSequentialGroup()
                                            .addComponent(lblAddCategory)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(btnAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(lblStar, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblAddBook)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                    .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                    .addComponent(lblBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtPubYear, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtBookName)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblOrigName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(checkLoan))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtLoaner)
                                        .addComponent(txtOriginalName)))
                                .addGroup(panelAddLayout.createSequentialGroup()
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnAuthorToTable, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(panelAddLayout.createSequentialGroup()
                                            .addGap(176, 176, 176)
                                            .addComponent(star4)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cBoxCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCatToTable, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))))
                            .addComponent(lblPubYear, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(star2)
                            .addComponent(star3)
                            .addComponent(star1))))
                .addContainerGap(507, Short.MAX_VALUE))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddAuthor)
                    .addComponent(lblAddCategoryHeader))
                .addGap(14, 14, 14)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddCategory)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAuthor)
                    .addComponent(btnAddCategory))
                .addGap(28, 28, 28)
                .addComponent(lblAddBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(star2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBookName)
                        .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPubYear)
                    .addComponent(txtPubYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(star1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrigName)
                    .addComponent(txtOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkLoan)
                    .addComponent(txtLoaner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(star4)
                    .addComponent(star3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAuthorToTable)
                    .addComponent(btnCatToTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBook)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(lblStar)
                .addGap(84, 84, 84))
        );

        jTabbedPane1.addTab("Lisää...", panelAdd);

        editBookTable.setModel(model);
        fillEditBookTable();
        jScrollPane3.setViewportView(editBookTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Kirjan muokkaus");

        btnSaveChanges.setText("Tallenna");

        javax.swing.GroupLayout panelEditLayout = new javax.swing.GroupLayout(panelEdit);
        panelEdit.setLayout(panelEditLayout);
        panelEditLayout.setHorizontalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveChanges)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(588, Short.MAX_VALUE))
        );
        panelEditLayout.setVerticalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSaveChanges)
                .addContainerGap(535, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Muokkaa...", panelEdit);

        javax.swing.GroupLayout panelDeleteLayout = new javax.swing.GroupLayout(panelDelete);
        panelDelete.setLayout(panelDeleteLayout);
        panelDeleteLayout.setHorizontalGroup(
            panelDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1094, Short.MAX_VALUE)
        );
        panelDeleteLayout.setVerticalGroup(
            panelDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 738, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Poista...", panelDelete);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jMenu1.setText("Tiedosto");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Muokkaa");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ohje");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        fillTable();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearBoxes();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        String name = txtBookName.getText();
        String origName = txtOriginalName.getText();
        String pubYear = txtPubYear.getText();
        String loaner = txtLoaner.getText();
        String onLoan;
        onLoan = checkLoan.isSelected() ? "Kyllä" : "Ei";
        ArrayList<Author> authors = new ArrayList();
        ArrayList<Category> categories = new ArrayList();
        
        for(int i = 0; i < authorCounter; i++) {
            Author a = new Author();
            String auth = addManyTable.getValueAt(i, 0).toString();
            String[] authName = auth.split(", ");
            String lName = authName[0];
            String fName = authName[1];
            a.getAuthor(fName, lName);   
            a.getBooks();
            authors.add(a);
        }
        
        for(int i = 0; i < categoryCounter; i++) {
            Category c = new Category();
            String cat = addManyTable.getValueAt(i, 1).toString();
            c.getCategory(cat);
            categories.add(c);
        }      

        if (checkPubYear()) {
            if (!name.isEmpty()) {
                boolean bookExists = false;
                for (Author a : authors){
                    for (Book bo : a.books) {
                        if (name.equalsIgnoreCase(bo.getName()) && Integer.parseInt(pubYear) == bo.getPubYear()) {
                            bookExists = true;
                        }
                    }
                }
                if (!bookExists) {
                    Book b = new Book(name, origName, Integer.parseInt(pubYear), onLoan, loaner);
                    for(Category c : categories) {
                        b.category.add(c);    
                    }
                        for(Author a : authors){
                        b.author.add(a);
                    }
                    b.addBook();
                    checkLoan.setSelected(false);
                    clearBoxes();
                } else {
                    JOptionPane.showMessageDialog(null, "Kirja löytyy jo tietokannasta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        //Storing whatever is in the txt field to variable
        String name = txtCategory.getText();

        if (!"".equalsIgnoreCase(name)) {
            if (!name.contains(" ")) {
                Category c = new Category(name);                            //if it isn't, create a new object
                if (!c.doesItExist()) {                                     //check whether the category already exists
                    c.addCategory();                                        //if it doesn't, add it to the database
                } else {                                                    //otherwise, display error dialog, tell user that the category already exists
                    JOptionPane.showMessageDialog(null, "Kategoria löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Kategorian nimessä ei voi olla välilyöntiä", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tekstilaatikko oli tyhjä!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE); //Inform user that the category text field was left blank
        }
        txtCategory.setText("");                //and finally, empty the text field
        comboCatRefresh();                      //Refresh 'categories' combobox contents
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void btnAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAuthorActionPerformed
        String name = txtFirstName.getText();
        String lastName = txtLastName.getText();

        if (!"".equalsIgnoreCase(name) && !"".equalsIgnoreCase(lastName)) {          //check that neither field is empty
            Author a = new Author(name, lastName);                                  //If they aren't, create a new Author
            if (!a.doIExist()) {                                                     //check if the author already exists
                a.addAuthor();                                                      //If not, add him/her to the database
            } else {                                                                //Else inform the user that the author already exists
                JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else if ("".equalsIgnoreCase(name)) {                                     //If the first check failed, inform user that name-field was emtpy
            JOptionPane.showMessageDialog(null, "Syötä myös etunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        } else {                                                                    //If the second check failed, inform user that lastName-field was empty
            JOptionPane.showMessageDialog(null, "Syötä myös sukunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
        txtFirstName.setText("");                                                   //Clear textfields
        txtLastName.setText("");                                                    //Clear textfields
        comboAuthorRefresh();                                                       //Refresh 'author' combobox contents
    }//GEN-LAST:event_btnAddAuthorActionPerformed

    private void btnAuthorToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorToTableActionPerformed
        String author = cBoxAuthor.getSelectedItem().toString();
        Boolean addToTable = true;
        for(int i = 0; i <= authorCounter; i++) {
            if(addManyTable.getValueAt(i, 0).toString().equalsIgnoreCase(author)) {
                addToTable = false;
            }                         
        }    
        if(addToTable){
                addManyTable.setValueAt(author, authorCounter, 0);
                authorCounter++;
        } else {
            JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAuthorToTableActionPerformed

    private void btnCatToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatToTableActionPerformed
        String category = cBoxCategory.getSelectedItem().toString();
        Boolean addToTable = true;
        for(int i = 0; i <= categoryCounter; i++) {
            if(addManyTable.getValueAt(i, 1).toString().equalsIgnoreCase(category)) {
                addToTable = false;
            }
        }
        if(addToTable) {
            addManyTable.setValueAt(category, categoryCounter, 1);
            categoryCounter++;
        } else {
            JOptionPane.showMessageDialog(null, "Kategoria löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);          
        }
    }//GEN-LAST:event_btnCatToTableActionPerformed

    private void fillAddManyTable() {
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        addManyTable.getColumnModel().getColumn(0).setMinWidth(205);
        addManyTable.getColumnModel().getColumn(0).setMaxWidth(205);
    }
    
    private void fillEditBookTable() {
        model.setRowCount(0);
        Book b = new Book();
        b.getBook(id);

        model.addRow(new Object[]{b.getName(), b.getPubYear(), (b.getOnLoan().equals("Kyllä") ? true : false), b.getLoaner(), b.getOrigName()});
        
    }
    
    private void fillTable() {
        ArrayList<Book> books = Book.getBooks();
        mod.setRowCount(0);

        for (Book b : books) {
            String aName = "";
            b.getAuthors();
            int aCount = 1;
            for (Author a : b.author) {
                aName += a.getLastName() + ", " + a.getName();
                aName += aCount < b.author.size() ? " - " : "";
                aCount++;
            }

            String cat = "";
            b.getCategories();
            int bCount = 1;
            for (Category c : b.category) {
                cat += c.getName();
                cat += bCount < b.category.size() ? " - " : "";
                bCount++;
            }
            mod.addRow(new Object[]{b.getId(), aName, b.getName(), b.getPubYear(), cat, b.getOnLoan(), b.getLoaner(), b.getOrigName()});
        }
        mod.setRowCount(books.size() + 1);

        browseTable.getColumnModel().getColumn(0).setMaxWidth(40);
        browseTable.getColumnModel().getColumn(1).setMinWidth(220);
        browseTable.getColumnModel().getColumn(2).setMinWidth(200);
        browseTable.getColumnModel().getColumn(2).setMaxWidth(200);
        browseTable.getColumnModel().getColumn(3).setMinWidth(90);
        browseTable.getColumnModel().getColumn(3).setMaxWidth(90);
        browseTable.getColumnModel().getColumn(4).setMinWidth(160);
        
        centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        browseTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        browseTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        browseTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }

    private boolean checkPubYear() {

        boolean yearOk = false;
        if (!txtPubYear.getText().isEmpty()) {
            if (txtPubYear.getText().length() == 4) {
                try {
                    int pubYear = Integer.parseInt(txtPubYear.getText());
                    yearOk = true;
                } catch (NumberFormatException n) {
                    JOptionPane.showMessageDialog(null, "Syötä neljänumeroinen vuosiluku, esim '1994'", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                    yearOk = false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Syötä neljänumeroinen vuosiluku, esim '1994'", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vuosiluku-tekstikenttä oli tyhjä", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
        return yearOk;
    }
    
    private void newFilter() {
        RowFilter<DefaultTableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter("(?i)" + filterAuthor.getText());
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void clearBoxes() {                                                 //Used to clear all text fields
        txtBookName.setText("");
        txtLoaner.setText("");
        txtPubYear.setText("");
        txtOriginalName.setText("");
        checkLoan.setSelected(false);
        dtm.setRowCount(0);
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        dtm.addRow(new Object[] { "", "" });
        authorCounter = 0;
        categoryCounter = 0;
    }

    private void comboAuthorRefresh() {
        ArrayList<Author> authors = Author.getAuthors();                        //Get an arraylist of all authors
        cBoxAuthor.removeAllItems();                                            //Remove all items from 'author' combobox
        for (Author a : authors) {                                                //For each author in 'authors'-list....
            cBoxAuthor.addItem(a.getLastName() + ", " + a.getName());           //...add new author name to combobox
        }
    }

    private void comboCatRefresh() {
        ArrayList<Category> categories = Category.getCategories();              //Get an arraylist of all categories
        cBoxCategory.removeAllItems();                                          //Remove all categories from 'categories' combobox
        for (Category c : categories) {                                           //For each category in 'categories'-list...
            cBoxCategory.addItem(c.getName());                                  //...add new category to combobox
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable addManyTable;
    private javax.swing.JTable browseTable;
    private javax.swing.JButton btnAddAuthor;
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAuthorToTable;
    private javax.swing.JButton btnCatToTable;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JComboBox cBoxAuthor;
    private javax.swing.JComboBox cBoxCategory;
    private javax.swing.JCheckBox checkLoan;
    private javax.swing.JTable editBookTable;
    private javax.swing.JTextField filterAuthor;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAddAuthor;
    private javax.swing.JLabel lblAddBook;
    private javax.swing.JLabel lblAddCategory;
    private javax.swing.JLabel lblAddCategoryHeader;
    private javax.swing.JLabel lblBookName;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblOrigName;
    private javax.swing.JLabel lblPubYear;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblStar;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelBrowse;
    private javax.swing.JPanel panelDelete;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JLabel star1;
    private javax.swing.JLabel star2;
    private javax.swing.JLabel star3;
    private javax.swing.JLabel star4;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtLoaner;
    private javax.swing.JTextField txtOriginalName;
    private javax.swing.JTextField txtPubYear;
    // End of variables declaration//GEN-END:variables
}
