/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entities.*;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Juha
 */
public class Menu extends javax.swing.JFrame {

    private DefaultTableModel mod;
    private DefaultTableModel dtm;
    private DefaultTableModel model;
    private TableRowSorter<DefaultTableModel> sorter;
    private DefaultTableCellRenderer centerRenderer;
    private int authorCounter = 0;
    private int categoryCounter = 0;
    private int id = 0;

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        TabbedPane = new javax.swing.JTabbedPane();
        panelBrowse = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Object col[] = {"ID", "Kirjailija", "Nimi", "Julkaisuvuosi", "Kategoria", "Lainassa", "Lainaaja", "Alkuperäinen nimi"};
        mod = new DefaultTableModel(null, col) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            @Override
            public Class getColumnClass(int column){
                switch (column) {
                    case 0:
                    return Integer.class;
                    case 3:
                    return Integer.class;
                    case 5:
                    return Boolean.class;
                    default:
                    return String.class;
                }
            }
        };
        browseTable = new javax.swing.JTable()
        ;
        filterAuthor = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        panelAdd = new javax.swing.JPanel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtAddAuthorFirstName = new javax.swing.JTextField();
        txtAddAuthorLastName = new javax.swing.JTextField();
        lblAddAuthor = new javax.swing.JLabel();
        btnAddAuthor = new javax.swing.JButton();
        lblAddCategoryHeader = new javax.swing.JLabel();
        lblAddCategory = new javax.swing.JLabel();
        txtAddCategory = new javax.swing.JTextField();
        btnAddCategory = new javax.swing.JButton();
        lblAddBook = new javax.swing.JLabel();
        ArrayList<Author> authors = Author.getAuthors();
        cBoxAuthor = new javax.swing.JComboBox();
        ArrayList<Category> categories = Category.getCategories();
        cBoxCategory = new javax.swing.JComboBox();
        lblBookName = new javax.swing.JLabel();
        lblOrigName = new javax.swing.JLabel();
        lblPubYear = new javax.swing.JLabel();
        txtBookName = new javax.swing.JTextField();
        txtPubYear = new javax.swing.JTextField();
        txtOriginalName = new javax.swing.JTextField();
        txtLoaner = new javax.swing.JTextField();
        btnAddBook = new javax.swing.JButton();
        checkLoan = new javax.swing.JCheckBox();
        star1 = new javax.swing.JLabel();
        star2 = new javax.swing.JLabel();
        star4 = new javax.swing.JLabel();
        lblCreateBookObligatory = new javax.swing.JLabel();
        star3 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Object cols[] = {"Kirjailija", "Kategoria"};
        dtm = new DefaultTableModel(null, cols) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        addBookTable = new javax.swing.JTable();
        btnCreateBookAddAuthor = new javax.swing.JButton();
        btnCreateBookAddCategory = new javax.swing.JButton();
        star5 = new javax.swing.JLabel();
        btnCreateBookDeleteAuthor = new javax.swing.JButton();
        btnCreateBookDeleteCategory = new javax.swing.JButton();
        panelEdit = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Object columns[] = {"Kirjailija", "Kategoria"};
        model = new DefaultTableModel(null, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }
        };
        editBookTable = new javax.swing.JTable()
        ;
        lblEditBookHeader = new javax.swing.JLabel();
        btnSaveChanges = new javax.swing.JButton();
        lblEditBookName = new javax.swing.JLabel();
        lblEditBookPubYear = new javax.swing.JLabel();
        lblEditBookOrigName = new javax.swing.JLabel();
        checkEditLoan = new javax.swing.JCheckBox();
        txtEditBookName = new javax.swing.JTextField();
        txtEditPubYear = new javax.swing.JTextField();
        txtEditOrigName = new javax.swing.JTextField();
        txtEditLoaner = new javax.swing.JTextField();
        ArrayList<Author> authors1 = Author.getAuthors();
        cBoxEditBookAuthor = new javax.swing.JComboBox();
        ArrayList<Category> categories1 = Category.getCategories();
        cBoxEditBookCategory = new javax.swing.JComboBox();
        btnClearEditBoxes = new javax.swing.JButton();
        btnEditBookAddAuthor = new javax.swing.JButton();
        btnEditBookAddCategory = new javax.swing.JButton();
        btnEditBookDeleteAuthor = new javax.swing.JButton();
        btnEditBookDeleteCategory = new javax.swing.JButton();
        lblEditAuthorHeader = new javax.swing.JLabel();
        lblEditAuthorFirstName = new javax.swing.JLabel();
        ArrayList<Author> authors2 = Author.getAuthors();
        cBoxEditAuthor = new javax.swing.JComboBox();
        txtEditAuthorLastName = new javax.swing.JTextField();
        txtEditAuthorName = new javax.swing.JTextField();
        btnEditAuthor = new javax.swing.JButton();
        lblEditAuthorLastName = new javax.swing.JLabel();
        lblEditCategoryHeader = new javax.swing.JLabel();
        ArrayList<Category> categories2 = Category.getCategories();
        cBoxEditCategory = new javax.swing.JComboBox();
        txtEditCategory = new javax.swing.JTextField();
        lblEditCategoryName = new javax.swing.JLabel();
        btnEditCategory = new javax.swing.JButton();
        star6 = new javax.swing.JLabel();
        star7 = new javax.swing.JLabel();
        star8 = new javax.swing.JLabel();
        star9 = new javax.swing.JLabel();
        star10 = new javax.swing.JLabel();
        lblEditBookObligatory = new javax.swing.JLabel();
        btnDeleteBook = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabbedPaneMouseClicked(evt);
            }
        });

        ((JComponent) browseTable.getDefaultRenderer(Boolean.class)).setOpaque(true);
        sorter = new TableRowSorter<DefaultTableModel>(mod);
        browseTable.setRowSorter(sorter);
        browseTable.setModel(mod);
        fillTable();
        browseTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if(browseTable.getSelectedRow() != -1) {
                    id = (Integer) browseTable.getValueAt(browseTable.getSelectedRow(), 0);
                    fillEditBookTable();
                }
            }
        });
        jScrollPane1.setViewportView(browseTable);

        filterAuthor.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }
            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }
            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });
        filterAuthor.setToolTipText("Kirjoita osa kirjailijan tai kirjan nimestä, tai vuodesta");

        lblSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSearch.setText("Haku");

        javax.swing.GroupLayout panelBrowseLayout = new javax.swing.GroupLayout(panelBrowse);
        panelBrowse.setLayout(panelBrowseLayout);
        panelBrowseLayout.setHorizontalGroup(
            panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBrowseLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1196, Short.MAX_VALUE)
                    .addGroup(panelBrowseLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSearch)
                        .addGap(18, 18, 18)
                        .addComponent(filterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        panelBrowseLayout.setVerticalGroup(
            panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBrowseLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabbedPane.addTab("Selaa", panelBrowse);

        lblFirstName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFirstName.setText("Etunimi");

        lblLastName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLastName.setText("Sukunimi");

        lblAddAuthor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddAuthor.setText("Kirjailijan lisääminen");

        btnAddAuthor.setText("Lisää kirjailija");
        btnAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAuthorActionPerformed(evt);
            }
        });

        lblAddCategoryHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddCategoryHeader.setText("Kategorian lisääminen");

        lblAddCategory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAddCategory.setText("Kategoria");

        btnAddCategory.setText("Lisää kategoria");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        lblAddBook.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddBook.setText("Kirjan lisääminen");

        cBoxAuthor.setModel(new javax.swing.DefaultComboBoxModel());

        cBoxCategory.setModel(new javax.swing.DefaultComboBoxModel());

        lblBookName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBookName.setText("Kirjan nimi");

        lblOrigName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblOrigName.setText("Alkuperäinen nimi");

        lblPubYear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPubYear.setText("Julkaisuvuosi");
        lblPubYear.setToolTipText("Nelinumeroinen vuosiluku, esim. 1994");

        btnAddBook.setText("Lisää kirja");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        checkLoan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkLoan.setText("Lainassa / Lainaaja");
        checkLoan.setToolTipText("Laita rasti ruutuun jos kirja on lainassa");

        star1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star1.setForeground(new java.awt.Color(255, 0, 0));
        star1.setText("*");
        star1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star2.setForeground(new java.awt.Color(255, 0, 0));
        star2.setText("*");
        star2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star4.setForeground(new java.awt.Color(255, 0, 0));
        star4.setText("*");
        star4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lblCreateBookObligatory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCreateBookObligatory.setText("Tähdellä merkityt ovat pakollisia tietoja");

        star3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star3.setForeground(new java.awt.Color(255, 0, 0));
        star3.setText("*");
        star3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnClear.setText("Tyhjennä");
        btnClear.setToolTipText("Paina tyhjentääksesi 'Lisää kirja'-lomakkeen tekstikentät");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        addBookTable.setModel(dtm);
        fillAddManyTable();
        jScrollPane2.setViewportView(addBookTable);

        btnCreateBookAddAuthor.setText("Lisää kirjailija");
        btnCreateBookAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookAddAuthorActionPerformed(evt);
            }
        });

        btnCreateBookAddCategory.setText("Lisää kategoria");
        btnCreateBookAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookAddCategoryActionPerformed(evt);
            }
        });

        star5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star5.setForeground(new java.awt.Color(255, 0, 0));
        star5.setText("*");
        star5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnCreateBookDeleteAuthor.setText("Poista kirjailija");
        btnCreateBookDeleteAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookDeleteAuthorActionPerformed(evt);
            }
        });

        btnCreateBookDeleteCategory.setText("Poista kategoria");
        btnCreateBookDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookDeleteCategoryActionPerformed(evt);
            }
        });

        for(Author a : authors){
            cBoxAuthor.addItem(a.getLastName() + ", " + a.getName());
        }
        cBoxAuthor.setSelectedIndex(-1);
        for(Category c : categories){
            cBoxCategory.addItem(c.getName());
        }
        cBoxCategory.setSelectedIndex(-1);

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(star5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCreateBookObligatory, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAddBook)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkLoan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOrigName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLoaner)
                                    .addComponent(txtOriginalName)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFirstName)
                                    .addComponent(lblLastName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAddAuthorLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(txtAddAuthorFirstName)))
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(lblAddAuthor)
                                .addGap(56, 56, 56)
                                .addComponent(lblAddCategoryHeader))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAddAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cBoxAuthor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCreateBookAddAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelAddLayout.createSequentialGroup()
                                        .addComponent(star4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnCreateBookAddCategory, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                            .addComponent(cBoxCategory, 0, 173, Short.MAX_VALUE)
                                            .addComponent(btnCreateBookDeleteCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPubYear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPubYear, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                    .addComponent(txtBookName)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                                        .addComponent(lblAddCategory)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(star1)
                            .addComponent(star2)
                            .addComponent(star3)))
                    .addComponent(btnCreateBookDeleteAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(824, Short.MAX_VALUE))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddAuthor)
                    .addComponent(lblAddCategoryHeader))
                .addGap(14, 14, 14)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtAddAuthorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddCategory)
                    .addComponent(txtAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtAddAuthorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAuthor)
                    .addComponent(btnAddCategory))
                .addGap(28, 28, 28)
                .addComponent(lblAddBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookName)
                    .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(star2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPubYear)
                    .addComponent(txtPubYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(star1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrigName)
                    .addComponent(txtOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkLoan)
                    .addComponent(txtLoaner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(star4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(star3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cBoxAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateBookAddAuthor)
                    .addComponent(btnCreateBookAddCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateBookDeleteAuthor)
                    .addComponent(btnCreateBookDeleteCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBook)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(star5)
                    .addComponent(lblCreateBookObligatory))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Lisää...", panelAdd);

        editBookTable.setModel(model);
        fillEditBookTable();
        jScrollPane3.setViewportView(editBookTable);

        lblEditBookHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEditBookHeader.setText("Kirjan muokkaus");

        btnSaveChanges.setText("Tallenna muutokset");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        lblEditBookName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditBookName.setText("Kirjan nimi");

        lblEditBookPubYear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditBookPubYear.setText("Julkaisuvuosi");

        lblEditBookOrigName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditBookOrigName.setText("Alkuperäinen nimi");

        checkEditLoan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkEditLoan.setText("Lainassa / Lainaaja");

        cBoxEditBookAuthor.setModel(new javax.swing.DefaultComboBoxModel());

        cBoxEditBookCategory.setModel(new javax.swing.DefaultComboBoxModel());
        for(Category c : categories1){
            cBoxEditBookCategory.addItem(c.getName());
        }
        cBoxEditBookCategory.setSelectedIndex(-1);

        btnClearEditBoxes.setText("Tyhjennä");
        btnClearEditBoxes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearEditBoxesActionPerformed(evt);
            }
        });

        btnEditBookAddAuthor.setText("Lisää kirjailija");
        btnEditBookAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookAddAuthorActionPerformed(evt);
            }
        });

        btnEditBookAddCategory.setText("Lisää kategoria");
        btnEditBookAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookAddCategoryActionPerformed(evt);
            }
        });

        btnEditBookDeleteAuthor.setText("Poista kirjailija");
        btnEditBookDeleteAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookDeleteAuthorActionPerformed(evt);
            }
        });

        btnEditBookDeleteCategory.setText("Poista kategoria");
        btnEditBookDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookDeleteCategoryActionPerformed(evt);
            }
        });

        lblEditAuthorHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEditAuthorHeader.setText("Kirjailijan muokkaus");

        lblEditAuthorFirstName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditAuthorFirstName.setText("Etunimi");

        cBoxEditAuthor.setModel(new javax.swing.DefaultComboBoxModel());
        for(Author a : authors2){
            cBoxEditAuthor.addItem(a.getLastName() + ", " + a.getName());
        }
        cBoxEditAuthor.setSelectedIndex(-1);
        cBoxEditAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBoxEditAuthorActionPerformed(evt);
            }
        });

        btnEditAuthor.setText("Muokkaa kirjailija");
        btnEditAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAuthorActionPerformed(evt);
            }
        });

        lblEditAuthorLastName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditAuthorLastName.setText("Sukunimi");

        lblEditCategoryHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEditCategoryHeader.setText("Kategorian muokkaus");

        cBoxEditCategory.setModel(new javax.swing.DefaultComboBoxModel());
        for(Category c : categories2){
            cBoxEditCategory.addItem(c.getName());
        }
        cBoxEditCategory.setSelectedIndex(-1);
        cBoxEditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBoxEditCategoryActionPerformed(evt);
            }
        });

        lblEditCategoryName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEditCategoryName.setText("Nimi");

        btnEditCategory.setText("Muokkaa kategoria");
        btnEditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCategoryActionPerformed(evt);
            }
        });

        star6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star6.setForeground(new java.awt.Color(255, 0, 0));
        star6.setText("*");
        star6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star7.setForeground(new java.awt.Color(255, 0, 0));
        star7.setText("*");
        star7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star8.setForeground(new java.awt.Color(255, 0, 0));
        star8.setText("*");
        star8.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star9.setForeground(new java.awt.Color(255, 0, 0));
        star9.setText("*");
        star9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        star10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        star10.setForeground(new java.awt.Color(255, 0, 0));
        star10.setText("*");
        star10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lblEditBookObligatory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblEditBookObligatory.setText("Tähdellä merkityt ovat pakollisia tietoja");

        btnDeleteBook.setText("Poista valittu kirja");
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        for(Author a : authors1){
            cBoxEditBookAuthor.addItem(a.getLastName() + ", " + a.getName());
        }
        cBoxEditBookAuthor.setSelectedIndex(-1);

        javax.swing.GroupLayout panelEditLayout = new javax.swing.GroupLayout(panelEdit);
        panelEdit.setLayout(panelEditLayout);
        panelEditLayout.setHorizontalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelEditLayout.createSequentialGroup()
                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEditBookHeader)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelEditLayout.createSequentialGroup()
                                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEditAuthorHeader)
                                            .addComponent(cBoxEditAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                        .addComponent(btnEditAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(62, 62, 62)))
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cBoxEditCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEditCategoryHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                        .addComponent(lblEditCategoryName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnEditCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(checkEditLoan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEditBookPubYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEditBookOrigName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEditBookName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtEditOrigName, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                        .addComponent(txtEditPubYear)
                                        .addComponent(txtEditBookName))
                                    .addComponent(txtEditLoaner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(star10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblEditBookObligatory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClearEditBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addComponent(cBoxEditBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(star8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cBoxEditBookCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelEditLayout.createSequentialGroup()
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEditAuthorFirstName)
                                    .addComponent(lblEditAuthorLastName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEditAuthorLastName)
                                    .addComponent(txtEditAuthorName))
                                .addGap(231, 231, 231))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEditLayout.createSequentialGroup()
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEditBookAddAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEditBookDeleteAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEditBookAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEditBookDeleteCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(star6)
                            .addComponent(star7)
                            .addComponent(star9))))
                .addContainerGap(822, Short.MAX_VALUE))
        );
        panelEditLayout.setVerticalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEditAuthorHeader)
                    .addComponent(lblEditCategoryHeader))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxEditAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cBoxEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEditAuthorFirstName)
                    .addComponent(txtEditAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditCategoryName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEditAuthorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditAuthorLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditAuthor)
                    .addComponent(btnEditCategory))
                .addGap(18, 18, 18)
                .addComponent(lblEditBookHeader)
                .addGap(18, 18, 18)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEditLayout.createSequentialGroup()
                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditBookName)
                            .addComponent(txtEditBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(star6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditBookPubYear)
                            .addComponent(txtEditPubYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(star7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelEditLayout.createSequentialGroup()
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEditBookOrigName, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEditOrigName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkEditLoan)
                                    .addComponent(txtEditLoaner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cBoxEditBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cBoxEditBookCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(star9, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(star8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditBookAddAuthor)
                    .addComponent(btnEditBookAddCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditBookDeleteAuthor)
                    .addComponent(btnEditBookDeleteCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveChanges)
                    .addComponent(btnClearEditBoxes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(star10)
                    .addComponent(lblEditBookObligatory))
                .addGap(18, 18, 18)
                .addComponent(btnDeleteBook)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Muokkaa...", panelEdit);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jMenu1.setText("Tiedosto");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Muokkaa");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ohje");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    *   Method that empties, then fills the browse table
    *   Called every time user clicks on the browse tab
    */
    private void TabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMouseClicked
        fillTable();
    }//GEN-LAST:event_TabbedPaneMouseClicked

    /*
    *   Method used when user has edited an category and clicks the edit category-button
    *   
    *   Gets the old name of the category from the combobox selection, stores it to a variable
    *   Stores the new name in different variable from the information in the text box
    *   Checks that textbox is not empty and that it doesn't contain blank spaces
    *   If not, create a new Category object using the old name
    *   Use the created category a to get the category id (which is needed to save the new information)
    *   Use category.java setter to set new name to Category object c
    *   Checks that this new category doesn't already exist (prevents duplicate categories)
    *   If not, use the updateCategory method from category.java, which was why the id was
    *   needed
    *   Upon update, informs the user via popup that the update was done, refreshes categories combobox
    *   and empties the textfield
    *   Else informs what went wrong (Category already exists, there was illegal characters in hte input, or name was empty
    */
    private void btnEditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCategoryActionPerformed
        String name = txtEditCategory.getText();
        String oldName = cBoxEditCategory.getSelectedItem().toString();

        if (!"".equalsIgnoreCase(name)) {
            if (!name.contains(" ")) {
                Category c = new Category(oldName);
                c.getCategory(oldName);
                c.setName(name);
                if (!c.doesItExist()) {
                    c.updateCategory();
                    comboCatRefresh();
                    txtAddCategory.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Kategoria löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Kategorian nimessä ei voi olla välilyöntiä", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tekstilaatikko oli tyhjä!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditCategoryActionPerformed

    /*
    *   Method used to get information on what category user wants to edit
    *   Get information from categories combobox, store which category was selected in a variable
    *   Stores chosen combobox information in a string
    *   Puts the name in correct text box for easy editing
    */
    private void cBoxEditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBoxEditCategoryActionPerformed
        try {
            String category = cBoxEditCategory.getSelectedItem().toString();
            txtEditCategory.setText(category);           
        } catch (Exception e) {}
    }//GEN-LAST:event_cBoxEditCategoryActionPerformed

    /*
    *   Method used when user has edited an author and clicks the edit author-button
    *   
    *   Gets the old name of the author from the combobox selection, stores it to a variable
    *   Splits it into parts so that it gets first and lastname separate
    *   Stores the new names in different variables from the information in the text boxes
    *   Checks that neither textbox was empty
    *   If not, create a new Author object using the old names
    *   Use the created author a to get the author id (which is needed to save the new information)
    *   Use author.java setters to set new first and last name to Author object a
    *   Checks that this new author doesn't already exist (prevents duplicate authors)
    *   If not, use the updateAuthor method from author.java, which was why the id was
    *   needed
    *   Upon update, informs the user via popup that the update was done, refreshes authors combobox
    *   and empties both textfields
    *   Else informs what went wrong (Author already exists, first name was empty or last name was empty)
    */
    private void btnEditAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAuthorActionPerformed
        String author = cBoxEditAuthor.getSelectedItem().toString();
        String[] authName = author.split(", ");
        String oldName = authName[1];
        String oldLastName = authName[0];
        String name = txtEditAuthorName.getText();
        String lastName = txtEditAuthorLastName.getText();

        if (!"".equalsIgnoreCase(name) && !"".equalsIgnoreCase(lastName)) {
            Author a = new Author(oldName, oldLastName);
            a.getAuthor(oldName, oldLastName);
            a.setName(name);
            a.setLastName(lastName);
            if(!a.doIExist()) {
                a.updateAuthor();
                comboAuthorRefresh();
                txtEditAuthorName.setText("");
                txtEditAuthorLastName.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else if ("".equalsIgnoreCase(name)) {
            JOptionPane.showMessageDialog(null, "Syötä myös etunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Syötä myös sukunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditAuthorActionPerformed

    /*
    *   Method used to get information on what author user wants to edit
    *   Stores chosen combobox information in a string
    *   Splits the string into parts and removes anything that isn't first- or lastname
    *   Puts the names in correct text boxes for easy editing
    */
    private void cBoxEditAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBoxEditAuthorActionPerformed
        try {
            String author = cBoxEditAuthor.getSelectedItem().toString();
            String[] authName = author.split(", ");
            String lName = authName[0];
            String fName = authName[1];
            txtEditAuthorLastName.setText(lName);
            txtEditAuthorName.setText(fName);         
        } catch(Exception e) {}
    }//GEN-LAST:event_cBoxEditAuthorActionPerformed
   
    /*
    *   Method used when user clicks delete category-button when editing a book
    *   User must choose which category to delete by selecting a row from the table
    *   The row number is stored in a variable
    *   The method deletes the text in the given cell
    *   Then moves all other categories upwards one row so no empty rows are left
    *   in the middle of the table
    *   Displays error popup if user has not selected a row in the table
    */
    private void btnEditBookDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookDeleteCategoryActionPerformed
        try {
            int row = editBookTable.getSelectedRow();
            editBookTable.setValueAt("", row, 1);
            for(int i = row+1; i < 6; i++) {
                String value = editBookTable.getValueAt(i, 1).toString();
                if(!value.equalsIgnoreCase("")) {
                    editBookTable.setValueAt(value, i-1, 1);
                    editBookTable.setValueAt("", i, 1);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse poistettava kategoria klikkaamalla haluttua riviä taulukossa", "Virhe poistettaessa", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditBookDeleteCategoryActionPerformed

    /*
    *   Method used when user clicks delete author-button when editing a book
    *   User must choose which author to delete by selecting a row from the table
    *   The row number is stored in a variable
    *   The method deletes the text in the given cell
    *   Then moves all other authors upwards one row so no empty rows are left
    *   in the middle of the table
    *   Displays error popup if user has not selected a row in the table
    */
    private void btnEditBookDeleteAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookDeleteAuthorActionPerformed
        try {
            int row = editBookTable.getSelectedRow();
            editBookTable.setValueAt("", row, 0);
            for(int i = row+1; i < 6; i++) {
                String value = editBookTable.getValueAt(i, 0).toString();
                if(!value.equalsIgnoreCase("")) {
                    editBookTable.setValueAt(value, i-1, 0);
                    editBookTable.setValueAt("", i, 0);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse poistettava kirjailija klikkaamalla haluttua riviä taulukossa", "Virhe poistettaessa", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditBookDeleteAuthorActionPerformed
    
    /*
    *   Save combobox selection to string variable
    *   Checks that the category the user wants to add isn't already in the table
    *   If it's not, enter the category information in the first empty row
    *   Display error to the user depending on what went wrong (category already in table,
    *   user has failed to select a book to edit from the browse table, or user
    *   has failed to choose which category to add from the category combobox
    */
    private void btnEditBookAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookAddCategoryActionPerformed
        try {
            String category = cBoxEditBookCategory.getSelectedItem().toString();
            if(editBookTable.getRowCount() > 1) {
                for (int i = 0; i < 6; i++) {
                    String value = editBookTable.getValueAt(i, 1).toString();
                    if (category != null && category.length() != 0 ) {
                        if (value.equalsIgnoreCase(category)) {
                            JOptionPane.showMessageDialog(null, "Kategoria löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                            i = 6;
                        } else if (value.length() < 1) {
                            editBookTable.setValueAt(category, i, 1);
                            i = 6;
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Valitse ensin selausvalikosta muokattava kirja", "Virhe", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse pudotusvalikosta lisättävä kategoria", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditBookAddCategoryActionPerformed

    /*
    *   Save combobox selection to string variable
    *   Checks that the author the user wants to add isn't already in the table
    *   If it's not, enter the author information in the first empty row
    *   Display error to the user depending on what went wrong (author already in table,
    *   user has failed to select a book to edit from the browse table, or user
    *   has failed to choose which author to add from the author combobox
    */
    private void btnEditBookAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookAddAuthorActionPerformed
        try {
            String author = cBoxEditBookAuthor.getSelectedItem().toString();
            if(editBookTable.getRowCount() > 1) {
                for (int i = 0; i < 6; i++) {
                    String val = editBookTable.getValueAt(i, 0).toString();
                    if (val.equalsIgnoreCase(author)) {
                        JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                        i = 6;
                    } else if (val.length() < 1) {
                        editBookTable.setValueAt(author, i, 0);
                        i = 6;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Valitse ensin selausvalikosta muokattava kirja", "Virhe", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse pudotusvalikosta lisättävä kirjailija", "Virhe", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditBookAddAuthorActionPerformed

    /*
    *   Used to clear all text boxes, to unselect the checkbox, and emptying the
    *   table in the editBook panel
    */
    private void btnClearEditBoxesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearEditBoxesActionPerformed
        clearEditBoxes();
    }//GEN-LAST:event_btnClearEditBoxesActionPerformed

    /*
    *   This method is used whenever the user has made some changes to a book and
    *   clicks the save changes-button. This is perhaps the most complicated method
    *   of all methods used.
    *
    *   First, create an empty Book object.
    *   Get the original book information, using the id (which we know since this
    *   relies on the user selecting a row in the browse table).
    *   Save all new information to variables
    *   Create empty arraylists for authors and categories
    *   Use book.java setter methods to set the new information to the book object
    *   If the user has checked that the book is on loan, also set loaner name,
    *   otherwise set loaner name as empty string
    *   Clear the original authors and categories from the book object, so that
    *   we can store new authors and categories
    *   As when adding a book, go through the editBookTable and add every author
    *   and category to the lists.
    *   Check publication year, and that the given new name is not empty
    *   Check that none of the authors has the new book associated with them already,
    *   based on name and publication year
    *   If ok, save changes to the book, adding the new associated authors and categories
    *   Else tell user what went wrong (one of the authors has the book associated already,
    *   the publication year was faulty, or the new given book name was empty)
    *   If the update is done, the method will also empty all text boxes, checkboxes and the table
    */
    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        Book b = new Book();
        b.getBook(id);

        String newName = txtEditBookName.getText();
        String newPubYear = txtEditPubYear.getText();
        boolean newOnLoan = checkEditLoan.isSelected();
        String newLoaner = txtEditLoaner.getText();
        String newOrigName = txtEditOrigName.getText();

        ArrayList<Author> authors = new ArrayList();
        ArrayList<Category> categories = new ArrayList();

        b.setName(newName);
        b.setOnLoan(newOnLoan);
        b.setOrigName(newOrigName);
        if(newOnLoan) {
            b.setLoaner(newLoaner);
        } else {
            b.setLoaner("");
        }
        b.author.clear();
        b.category.clear();

        for (int i = 0; i < 6; i++) {
            String val = editBookTable.getValueAt(i, 0).toString();
            if(!val.isEmpty()) {
                Author a = new Author();
                String[] authName = val.split(", ");
                String lName = authName[0];
                String fName = authName[1];
                a.getAuthor(fName, lName);
                a.getBooks();
                authors.add(a);
            } else {
                i = 6;
            }
        }

        for (int i = 0; i < 6; i++) {
            String cat = editBookTable.getValueAt(i, 1).toString();
            if(!cat.isEmpty()) {
                Category c = new Category();
                c.getCategory(cat);
                categories.add(c);
            } else {
                i = 6;
            }
        }

        if (checkPubYear(newPubYear)) {
            if (!newName.isEmpty()) {
                boolean bookExists = false;
                for (Author a : authors) {
                    for (Book bo : a.books) {
                        if (newName.equalsIgnoreCase(bo.getName()) && Integer.parseInt(newPubYear) == bo.getPubYear()
                                && bo.getId() != b.getId()) {
                            bookExists = true;
                        }
                    }
                }
                if (!bookExists) {
                    for (Category c : categories) {
                        b.category.add(c);
                    }
                    for (Author a : authors) {
                        b.author.add(a);
                    }
                    b.updateBook();
                    checkEditLoan.setSelected(false);
                    clearEditBoxes();
                } else {
                    JOptionPane.showMessageDialog(null, "Kirjan muokkaus epäonnistui. Tarkasta, ettei jollain kirjailijalla ole jo kyseistä kirjaa", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Kirjan nimi puuttuu", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnSaveChangesActionPerformed

    /*
    *   Saves combobox selection as string variable
    *   Checks that category the user wants to add to the table isn't already added
    *   If it isn't, add category to the table, otherwise tell user what went wrong
    *   Possible errors: trying to add more than 6 categories, or the category was
    *   already added to the table
    */
    private void btnCreateBookAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookAddCategoryActionPerformed
        String category = cBoxCategory.getSelectedItem().toString();
        Boolean addToTable = true;
        if(categoryCounter < 6) {
            for (int i = 0; i <= categoryCounter; i++) {
                if (addBookTable.getValueAt(i, 1).toString().equalsIgnoreCase(category)) {
                    addToTable = false;
                }
            }
            if (addToTable) {
                addBookTable.setValueAt(category, categoryCounter, 1);
                categoryCounter++;
            } else {
                JOptionPane.showMessageDialog(null, "Kategoria löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kirjalla voi olla korkeintaan kuusi kategoriaa", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateBookAddCategoryActionPerformed

    /*
    *   Saves combobox selection as a string variable
    *   Checks that the author the user wants to add to the table isn't already added
    *   If it isn't, add author to table, otherwise tell user what went wrong
    *   Also makes sure that there's not more than 6 authors added
    */
    private void btnCreateBookAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookAddAuthorActionPerformed
        String author = cBoxAuthor.getSelectedItem().toString();
        Boolean addToTable = true;
        if(authorCounter < 6) {
            for (int i = 0; i <= authorCounter; i++) {
                if (addBookTable.getValueAt(i, 0).toString().equalsIgnoreCase(author)) {
                    addToTable = false;
                }
            }
            if (addToTable) {
                addBookTable.setValueAt(author, authorCounter, 0);
                authorCounter++;
            } else {
                JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo taulukosta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kirjalla voi olla korkeintaan kuusi kirjailijaa", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateBookAddAuthorActionPerformed

    //Used to clear all textboxes, checkboxes and table data
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearBoxes();
    }//GEN-LAST:event_btnClearActionPerformed

    /*
    *   Store all user input from text boxes and checkboxes, and the addManyTable
    *   Create new arraylists for authors and categories
    *   Go through the table, adding every author to the authors list
    *   Do same thing as above for categories
    *   Check that neither list is empty, if either one is, display error, prompting
    *   user to add at least one author and category
    *   Proceed to check publication year and name
    *   Then, for each author, go through his/her books, so that we don't accidentaly
    *   add duplicate books if any of them has the same book already entered in
    *   the database (in which case the user should rather edit that book and add the
    *   other authors to it).
    *   If all goes right, makes a Book object containing all given information
    *   Adds the categories and authors to the book
    *   Adds the book to the database, and empties all text fields and the table
    */
    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        String name = txtBookName.getText();
        String origName = txtOriginalName.getText();
        String pubYear = txtPubYear.getText();
        String loaner = txtLoaner.getText();
        boolean onLoan = checkLoan.isSelected();
        ArrayList<Author> authors = new ArrayList();
        ArrayList<Category> categories = new ArrayList();

        for (int i = 0; i < authorCounter; i++) {
            Author a = new Author();
            String auth = addBookTable.getValueAt(i, 0).toString();
            String[] authName = auth.split(", ");
            String lName = authName[0];
            String fName = authName[1];
            a.getAuthor(fName, lName);
            a.getBooks();
            authors.add(a);
        }

        for (int i = 0; i < categoryCounter; i++) {
            Category c = new Category();
            String cat = addBookTable.getValueAt(i, 1).toString();
            c.getCategory(cat);
            categories.add(c);
        }

        boolean addBook = true;
        if(authors.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lisää vähintään yksi kirjailija taulukkoon", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            addBook = false;
        } else if (categories.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lisää vähintään yksi kategoria taulukkoon", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            addBook = false;
        }

        if (checkPubYear(pubYear)) {
            if (!name.isEmpty()) {
                for (Author a : authors) {
                    for (Book bo : a.books) {
                        if (name.equalsIgnoreCase(bo.getName()) && Integer.parseInt(pubYear) == bo.getPubYear()) {
                            JOptionPane.showMessageDialog(null, "Kirja löytyy jo tietokannasta", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                            addBook = false;
                        }
                    }
                }
                if (addBook) {
                    Book b = new Book(name, origName, Integer.parseInt(pubYear), onLoan, loaner);
                    for (Category c : categories) {
                        b.category.add(c);
                    }
                    for (Author a : authors) {
                        b.author.add(a);
                    }
                    b.addBook();
                    checkLoan.setSelected(false);
                    clearBoxes();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Anna kirjalle nimi", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    /*
    *   Stores the given category name in variable.
    *   Checks that given name is not empty
    *   Checks that the category name doesn't contain blank spaces
    *   If all is well, create a new Category object with given name
    *   Check that the category doesn't already exist in the database
    *   Gives different error popups based on what went wrong
    *   Empties text box and refreshes category combobox
    */
    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        //Storing whatever is in the txt field to variable
        String name = txtAddCategory.getText();

        if (!"".equalsIgnoreCase(name)) {
            if (!name.contains(" ")) {
                Category c = new Category(name);
                if (!c.doesItExist()) {
                    c.addCategory();
                } else {
                    JOptionPane.showMessageDialog(null, "Kategoria löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Kategorian nimessä ei voi olla välilyöntiä", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tekstilaatikko oli tyhjä!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
        txtAddCategory.setText("");
        comboCatRefresh();
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    /*
    *   First, saves user input as two strings from the text boxes. Then, checks
    *   that neither of the boxes were empty. If not, proceeds to create a new Author
    *   object, with which it can then check that the given author doesn't already
    *   exist in the database (a.doIExist). If it doesn't, proceeds to add the author
    *   to the database. Otherwise, tell the user what went wrong (that either name was
    *   missing, or that the author has already been added. Last but not least,
    *   the method empties both text boxes and calls for comboAuthorRefresh(), which,
    *   as the name implies, refreshes author combobox contents.
    */
    private void btnAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAuthorActionPerformed
        String name = txtAddAuthorFirstName.getText();
        String lastName = txtAddAuthorLastName.getText();

        if (!"".equalsIgnoreCase(name) && !"".equalsIgnoreCase(lastName)) {
            Author a = new Author(name, lastName);
            if (!a.doIExist()) {
                a.addAuthor();
            } else {
                JOptionPane.showMessageDialog(null, "Kirjailija löytyy jo tietokannasta.", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else if ("".equalsIgnoreCase(name)) {
            JOptionPane.showMessageDialog(null, "Syötä myös etunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Syötä myös sukunimi!", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
        txtAddAuthorFirstName.setText("");
        txtAddAuthorLastName.setText("");
        comboAuthorRefresh();
    }//GEN-LAST:event_btnAddAuthorActionPerformed

    /*
    *   Simply used to delete a book, this method depends on the user choosing
    *   a book by clicking a row in the browse table in the browse panel.
    */
    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed
        if(id != 0){ 
            Book b = new Book();
            b.deleteBook(id);
        } else {
            JOptionPane.showMessageDialog(null, "Valitse ensin poistettava kirja selaus-taulukosta", "Virhe poistettaessa", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    private void btnCreateBookDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookDeleteCategoryActionPerformed
        try {
            int row = addBookTable.getSelectedRow();
            addBookTable.setValueAt("", row, 1);
            for(int i = row+1; i < 6; i++) {
                String value = addBookTable.getValueAt(i, 1).toString();
                if(!value.equalsIgnoreCase("")) {
                    addBookTable.setValueAt(value, i-1, 1);
                    addBookTable.setValueAt("", i, 1);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse poistettava kategoria klikkaamalla haluttua riviä taulukossa", "Virhe poistettaessa", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateBookDeleteCategoryActionPerformed

    private void btnCreateBookDeleteAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookDeleteAuthorActionPerformed
        try {
            int row = addBookTable.getSelectedRow();
            addBookTable.setValueAt("", row, 0);
            for(int i = row+1; i < 6; i++) {
                String value = addBookTable.getValueAt(i, 0).toString();
                if(!value.equalsIgnoreCase("")) {
                    addBookTable.setValueAt(value, i-1, 0);
                    addBookTable.setValueAt("", i, 0);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Valitse poistettava kirjailija klikkaamalla haluttua riviä taulukossa", "Virhe poistettaessa", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateBookDeleteAuthorActionPerformed

    /*  Method used to create six empty rows in the small table located in
    *   add book panel.
    */
    private void fillAddManyTable() {
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        addBookTable.getColumnModel().getColumn(0).setMinWidth(205);
        addBookTable.getColumnModel().getColumn(0).setMaxWidth(205);
    }

    /*
    *   Much like it's neighbor, fillTable(), this is used to fill the small table
    *   in the edit panel. It only fills it if the id variable is something else than 0,
    *   though. Because it relies on the user clicking on a row in the browse table
    *   to get the information to fill in all known information about the book, such
    *   as authors, categories, book name, publication year etc. If the user hasn't
    *   selected any book, there's not much point in filling a empty table.
    */
    private void fillEditBookTable() {
        if (id != 0) {
            model.setRowCount(0);
            model.addRow(new Object[]{"", ""});
            model.addRow(new Object[]{"", ""});
            model.addRow(new Object[]{"", ""});
            model.addRow(new Object[]{"", ""});
            model.addRow(new Object[]{"", ""});
            model.addRow(new Object[]{"", ""});
            editBookTable.getColumnModel().getColumn(0).setMinWidth(205);
            editBookTable.getColumnModel().getColumn(0).setMaxWidth(205);

            Book b = new Book();
            b.getBook(id);
            txtEditBookName.setText(b.getName());
            txtEditPubYear.setText(b.getPubYear() + "");
            txtEditLoaner.setText(b.getLoaner());
            txtEditOrigName.setText(b.getOrigName());
            if (b.getOnLoan()) {
                checkEditLoan.setSelected(true);
            } else {
                checkEditLoan.setSelected(false);
            }

            b.getAuthors();
            b.getCategories();

            String authorName = "";
            int authorCount = 0;
            for (Author a : b.author) {
                authorName = a.getLastName() + ", " + a.getName();
                editBookTable.setValueAt(authorName, authorCount, 0);
                authorCount++;
            }
            String categoryName = "";
            int categoryCount = 0;
            for (Category c : b.category) {
                categoryName = c.getName();
                editBookTable.setValueAt(categoryName, categoryCount, 1);
                categoryCount++;
            }
        }
    }
    
    /*
    *   Method used to fill the browse table. First, it fetches all books in the database.
    *   Then, it sets the row count for the "mod" table model to 0 (this is a way of clearing
    *   the table of old information). After that, I use a for-each loop which loops through
    *   every book in the arraylist, adding the authors and categories to it, then adding
    *   all this information row by row to the table. At last, I've set some parameters for
    *   table column widths, and centered some of the table column names.
    */
    private void fillTable() {
        ArrayList<Book> books = Book.getBooks();
        mod.setRowCount(0);

        for (Book b : books) {
            String aName = "";
            b.getAuthors();
            int aCount = 1;
            for (Author a : b.author) {
                aName += a.getLastName() + ", " + a.getName();
                aName += aCount < b.author.size() ? " - " : "";
                aCount++;
            }

            String cat = "";
            b.getCategories();
            int bCount = 1;
            for (Category c : b.category) {
                cat += c.getName();
                cat += bCount < b.category.size() ? " - " : "";
                bCount++;
            }
            mod.addRow(new Object[]{b.getId(), aName, b.getName(), b.getPubYear(), cat, b.getOnLoan(), b.getLoaner(), b.getOrigName()});
        }

        browseTable.getColumnModel().getColumn(0).setMaxWidth(40);
        browseTable.getColumnModel().getColumn(1).setMinWidth(220);
        browseTable.getColumnModel().getColumn(2).setMinWidth(200);
        browseTable.getColumnModel().getColumn(2).setMaxWidth(200);
        browseTable.getColumnModel().getColumn(3).setMinWidth(90);
        browseTable.getColumnModel().getColumn(3).setMaxWidth(90);
        browseTable.getColumnModel().getColumn(4).setMinWidth(160);

        centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        browseTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        browseTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        browseTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }

    /*
    * A method for checking if the year of publication submitted by the user
    * is valid. The number is submitted as a String, because it's easier to verify the
    * length of a string than it is to check the amount of numbers in an integer.
    * 1: Check if the box is empty - if it is, notify user that he needs to add publication year
    * 2: Check the number submitted by the user - if it is anything but 4 letters long, inform user
    *    that he needs to fix his input to fit our database standard
    * 3: If, and only if, the number is 4 letters long, try to convert it into an integer.
    *    This tells us if there's something else than numbers submitted by the user. If there is,
    *    again, notify the user that he has to correct his input to numbers only.
    */
    private boolean checkPubYear(String pubYear) {

        boolean yearOk = false;
        if (!pubYear.isEmpty()) {
            if (pubYear.length() == 4) {
                try {
                    int pYear = Integer.parseInt(pubYear);
                    yearOk = true;
                } catch (NumberFormatException n) {
                    JOptionPane.showMessageDialog(null, "Syötä neljänumeroinen vuosiluku, esim '1994'", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
                    yearOk = false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Syötä neljänumeroinen vuosiluku, esim '1994'", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Syötä julkaisuvuosi oli tyhjä", "Virhe lisätessä", JOptionPane.ERROR_MESSAGE);
        }
        return yearOk;
    }

    /*
    * A simple search filter that enables on-the-fly searching in the
    * browse table. Makes searching really easy, as it checks every cell
    * and filters the table based on user search input. I chose this instead
    * of separate searching possibilities (search by author, book name, year etc)
    * as I thought this was neater and easier to develop.
    */
    private void newFilter() {
        RowFilter<DefaultTableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter("(?i)" + filterAuthor.getText());
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    /*  
    *   Clears all textfields in add-panel
    *   Deletes all rows in dtm table model, then creates six empty ones
    *   Resets authorCounter and categoryCounter to 0
    */
    private void clearBoxes() {
        txtAddAuthorFirstName.setText("");
        txtAddAuthorLastName.setText("");
        txtAddCategory.setText("");
        txtBookName.setText("");
        txtLoaner.setText("");
        txtPubYear.setText("");
        txtOriginalName.setText("");
        checkLoan.setSelected(false);
        dtm.setRowCount(0);
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        dtm.addRow(new Object[]{"", ""});
        authorCounter = 0;
        categoryCounter = 0;
    }
    
    //Clears all textfields and the table in the edit-panel
    private void clearEditBoxes() {
        txtEditAuthorLastName.setText("");
        txtEditAuthorName.setText("");
        txtEditBookName.setText("");
        txtEditCategory.setText("");
        txtEditLoaner.setText("");
        txtEditOrigName.setText("");
        txtEditPubYear.setText("");
        cBoxEditAuthor.setSelectedIndex(-1);
        cBoxEditBookAuthor.setSelectedIndex(-1);
        cBoxEditBookCategory.setSelectedIndex(-1);
        cBoxEditCategory.setSelectedIndex(-1);
        model.setRowCount(0);
        checkEditLoan.setSelected(false);
    }

    /*
    *   Fetch an arraylist of all authors
    *   Remove all items from all author-related comboboxes used
    *   For each author in the 'authors' -list...
    *   ...add author name to every author-related combobox
    */
    private void comboAuthorRefresh() {
        ArrayList<Author> authors = Author.getAuthors();
        cBoxAuthor.removeAllItems();
        cBoxEditAuthor.removeAllItems();
        cBoxEditBookAuthor.removeAllItems();
        for (Author a : authors) {
            cBoxAuthor.addItem(a.getLastName() + ", " + a.getName());
            cBoxEditAuthor.addItem(a.getLastName() + ", " + a.getName());
            cBoxEditBookAuthor.addItem(a.getLastName() + ", " + a.getName());
        }
        cBoxAuthor.setSelectedIndex(-1);
        cBoxEditAuthor.setSelectedIndex(-1);
        cBoxEditBookAuthor.setSelectedIndex(-1);
    }

    /*
    *   Fetch an arraylist of all categories in the database
    *   Remove all items from all category-related comboboxes
    *   For each category in 'categories'-list...
    *   ...add category to all category-related comboboxes
    */
    private void comboCatRefresh() {
        ArrayList<Category> categories = Category.getCategories();
        cBoxCategory.removeAllItems();
        cBoxEditCategory.removeAllItems();
        cBoxEditBookCategory.removeAllItems();
        for (Category c : categories) {
            cBoxCategory.addItem(c.getName());
            cBoxEditCategory.addItem(c.getName());
            cBoxEditBookCategory.addItem(c.getName());
        }
        cBoxCategory.setSelectedIndex(-1);
        cBoxEditCategory.setSelectedIndex(-1);
        cBoxEditBookCategory.setSelectedIndex(-1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTable addBookTable;
    private javax.swing.JTable browseTable;
    private javax.swing.JButton btnAddAuthor;
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearEditBoxes;
    private javax.swing.JButton btnCreateBookAddAuthor;
    private javax.swing.JButton btnCreateBookAddCategory;
    private javax.swing.JButton btnCreateBookDeleteAuthor;
    private javax.swing.JButton btnCreateBookDeleteCategory;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnEditAuthor;
    private javax.swing.JButton btnEditBookAddAuthor;
    private javax.swing.JButton btnEditBookAddCategory;
    private javax.swing.JButton btnEditBookDeleteAuthor;
    private javax.swing.JButton btnEditBookDeleteCategory;
    private javax.swing.JButton btnEditCategory;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JComboBox cBoxAuthor;
    private javax.swing.JComboBox cBoxCategory;
    private javax.swing.JComboBox cBoxEditAuthor;
    private javax.swing.JComboBox cBoxEditBookAuthor;
    private javax.swing.JComboBox cBoxEditBookCategory;
    private javax.swing.JComboBox cBoxEditCategory;
    private javax.swing.JCheckBox checkEditLoan;
    private javax.swing.JCheckBox checkLoan;
    private javax.swing.JTable editBookTable;
    private javax.swing.JTextField filterAuthor;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddAuthor;
    private javax.swing.JLabel lblAddBook;
    private javax.swing.JLabel lblAddCategory;
    private javax.swing.JLabel lblAddCategoryHeader;
    private javax.swing.JLabel lblBookName;
    private javax.swing.JLabel lblCreateBookObligatory;
    private javax.swing.JLabel lblEditAuthorFirstName;
    private javax.swing.JLabel lblEditAuthorHeader;
    private javax.swing.JLabel lblEditAuthorLastName;
    private javax.swing.JLabel lblEditBookHeader;
    private javax.swing.JLabel lblEditBookName;
    private javax.swing.JLabel lblEditBookObligatory;
    private javax.swing.JLabel lblEditBookOrigName;
    private javax.swing.JLabel lblEditBookPubYear;
    private javax.swing.JLabel lblEditCategoryHeader;
    private javax.swing.JLabel lblEditCategoryName;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblOrigName;
    private javax.swing.JLabel lblPubYear;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelBrowse;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JLabel star1;
    private javax.swing.JLabel star10;
    private javax.swing.JLabel star2;
    private javax.swing.JLabel star3;
    private javax.swing.JLabel star4;
    private javax.swing.JLabel star5;
    private javax.swing.JLabel star6;
    private javax.swing.JLabel star7;
    private javax.swing.JLabel star8;
    private javax.swing.JLabel star9;
    private javax.swing.JTextField txtAddAuthorFirstName;
    private javax.swing.JTextField txtAddAuthorLastName;
    private javax.swing.JTextField txtAddCategory;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtEditAuthorLastName;
    private javax.swing.JTextField txtEditAuthorName;
    private javax.swing.JTextField txtEditBookName;
    private javax.swing.JTextField txtEditCategory;
    private javax.swing.JTextField txtEditLoaner;
    private javax.swing.JTextField txtEditOrigName;
    private javax.swing.JTextField txtEditPubYear;
    private javax.swing.JTextField txtLoaner;
    private javax.swing.JTextField txtOriginalName;
    private javax.swing.JTextField txtPubYear;
    // End of variables declaration//GEN-END:variables
}